#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <math.h>

//求100-200之间的素数的N种方法

int main(void)
{

	int p[30];
	int length;
	int i;
	get_primenum_4(p);
	length = sizeof(p) / sizeof(p[0]);
	for (i = 0; i < length; i++)
	{
		printf("%d ", p[i]);
	}
	return 0;
}

//第一种，最传统的方法
int get_primenum_1(int* p)
{
	int i,j;
	int count = 0;
	for (i = 100; i <= 200; i++)
	{
		for (j = 2; j < i; j++)
		{
			if (i%j == 0)
			{
				break;
			}
		}
		if (j == i)
		{
			p[count] = i;
			count++;
		}
	}
}

//第二种方法，对上一种方法进行优化，考虑100-200之间的偶数都不是质数
//除去偶数，所以可以减少循环次数
int get_primenum_2(int* p)
{
	int i, j;
	int count = 0;
	for (i = 101; i <= 200; i+=2)
	{
		for (j = 2; j < i; j++)
		{
			if (i%j == 0)
			{
				break;
			}
		}
		if (j == i)
		{
			p[count] = i;
			count++;
		}
	}
}

//第三种方法，对上一种方法继续优化，由于一个数如果不是质数
//则可以分解成两个数相乘，其中的一个因子一定小于等于这个数开根号
//所以又可以减少一大部分计算量
int get_primenum_3(int* p)
{
	int i, j;
	int count = 0;
	for (i = 101; i <= 200; i += 2)
	{
		for (j = 2; j <= sqrt(i); j++)
		{
			if (i%j == 0)
			{
				break;
			}
		}
		if (j > sqrt(i))
		{
			p[count] = i;
			count++;
		}
	}
}

//第四种方法，用空间换时间，继续提高计算速度
//思想：除去除数本身的非素数。保存之前算好的素数，用这些素数试除
//计算100以内的素数
//感觉不能用数组来写，要用链表
int get_primenum_4(int* p)
{
	int i;
	int num=0, count=1;
	p[0] = 2;//先存储最小的素数
	for (i = 3; i <= 100; i += 2)
	{
		while (p[num] <= sqrt(i))
		{
			if (i%p[num] == 0)
				break;
			else
				num++;
		}
		if (p[num] > sqrt(i))
		{
			p[count] = i;
			count++;
			num = 0;
		}
	}
}
//还有很多方法可以搞速度
